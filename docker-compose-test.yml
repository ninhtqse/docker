version: "3.7"

networks:
  webphp:
    driver: bridge
    ipam:
      config:
        - subnet: 10.201.0.0/16
          gateway: 10.201.0.1
services:
    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        container_name: c-nginx
        restart: always
        ports:
            - "81:80"
            - "443:443"
        volumes:
            - ./code:/var/www
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/sites-enabled:/etc/nginx/sites-enabled
            - ./nginx/ssl:/etc/nginx/ssl
            - ./nginx/log/nginx:/var/log/nginx
        links:
            - php
            - php8
            - mysql
        healthcheck:
            test: ["CMD", "service", "nginx", "status"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            webphp:
                ipv4_address: 10.201.0.2
    php:
        build:
            context: ./php
            dockerfile: Dockerfile
        container_name: c-php
        restart: always
        user: www-data
        volumes:
            - ./code:/var/www
            - ./php/crontab:/etc/cron.d/crontab
        links: 
            - mysql
            - redis
            # - memcached
        networks:
            webphp:
                ipv4_address: 10.201.0.3
    php8:
        build:
            context: ./php
            dockerfile: Dockerfile8
        container_name: c-php-8
        restart: always
        user: www-data
        volumes:
            - ./code:/var/www
            - ./php/crontab:/etc/cron.d/crontab
        links: 
            - mysql
            - redis
            # - memcached
        networks:
            webphp:
                ipv4_address: 10.201.0.4
    mysql: 
        build:
            context: ./mysql
            dockerfile: Dockerfile
        container_name: c-mysql
        command: [--default-authentication-plugin=mysql_native_password, --max-allowed-packet=10GB]
        ports: 
            - "3309:3306"
        restart: always
        volumes:
            - ./mysql/config/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
            - ./mysql/dbdata:/var/lib/mysql
        environment:
            - MYSQL_DATABASE=projectlaravel
            - MYSQL_ROOT_PASSWORD=123456
        networks:
            webphp:
                ipv4_address: 10.201.0.5
    redis:
        container_name: c-redis
        image: redis
        restart: always
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        ports:
            - '6379:6379'
        healthcheck:
            test: ["CMD", "redis-cli","ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            webphp:
                ipv4_address: 10.201.0.6
    # apache:
    #     build:
    #         context: ./apache
    #         dockerfile: Dockerfile
    #     restart: always
    #     container_name: c-apache
    #     volumes:
    #         - ./code:/var/www
    #         - ./apache/httpd.conf:/usr/local/apache2/conf/httpd.conf
    #         - ./apache/sites-enabled:/usr/local/apache2/conf/sites-enabled
    #     depends_on:
    #         - php
    #         - php8
    #         - mysql
    #     ports:
    #         - "82:80"
    #     networks:
    #         webphp:
    #             ipv4_address: 10.201.0.7
    # memcached:
    #     container_name: c-memcached
    #     image: memcached
    #     ports:
    #         - "11211:11211"
    #     networks:
    #         webphp:
    #             ipv4_address: 10.201.0.8
    # mariadb:
    #     image: mariadb
    #     tty: true
    #     restart: always
    #     container_name: c-mariadb
    #     ports:
    #         - '3307:3306'
    #     volumes:
    #         - './mysql/config/mariadb.cnf:/etc/mysql/conf.d/custom.cnf:ro'
    #         - './mysql/dbdata:/var/lib/mysql'
    #     environment:
    #         - MYSQL_PASSWORD=root
    #         - MYSQL_ROOT_PASSWORD=123456
    #     networks:
    #         webphp:
    #             ipv4_address: 10.201.0.9
    # postgres:
    #     image: postgres:13-alpine
    #     container_name: c-postgres
    #     tty: true
    #     restart: always
    #     ports:
    #         - "5432:5432"
    #     volumes:
    #         - "./postgres/dbdata:/var/lib/postgresql/data"
    #     environment:
    #         - POSTGRES_USER=root
    #         - POSTGRES_PASSWORD=123456
    #==============> STATISTICAL <=================
    # elasticsearch:
    #     container_name: c-elasticsearch
    #     image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    #     environment:
    #         - xpack.security.enabled=false
    #         - "discovery.type=single-node"
    #     restart: unless-stopped
    #     networks:
    #         webphp:
    #             ipv4_address: 10.201.0.9
    #     ports:
    #         - 9200:9200
    # kibana:
    #     container_name: c-kibana
    #     image: docker.elastic.co/kibana/kibana:7.11.0
    #     environment:
    #         - ELASTICSEARCH_HOSTS=http://c-elasticsearch:9200
    #     restart: unless-stopped
    #     networks:
    #         webphp:
    #             ipv4_address: 10.201.0.10
    #     depends_on:
    #         - elasticsearch
    #     ports:
    #         - 5601:5601
    # cadvisor:
    #     image: gcr.io/google-containers/cadvisor:latest
    #     container_name: c-cadvisor
    #     restart: unless-stopped
    #     ports:
    #         - 8081:8080
    #     volumes:
    #         - /:/rootfs:ro
    #         - /var/run:/var/run:rw
    #         - /sys:/sys:ro
    #         - /var/lib/docker/:/var/lib/docker:ro
    # prometheus:
    #     image: prom/prometheus:latest
    #     ports:
    #         - 9090:9090
    #     command:
    #         - --config.file=/etc/prometheus/prometheus.yml
    #     volumes:
    #         - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    #     depends_on:
    #         - cadvisor
    # grafana:
    #     image: grafana/grafana
    #     ports:
    #         - 8082:3000
    #     volumes:
    #         - ./data:/var/lib/grafana
    #     restart: always
    #     depends_on:
    #         - prometheus
    # sqlserver:
    #     image: mcr.microsoft.com/mssql/server:2022-latest
    #     container_name: sqlserver
    #     environment:
    #     - ACCEPT_EULA=Y
    #     - SA_PASSWORD=Password_123#
    #     ports:
    #     - "1433:1433"
    #     restart: unless-stopped
